@import './variables';
* {
  //把元素的内边距和边框都塞到盒子里边，不让盒子变形
  box-sizing: border-box; 
  //当元素获得焦点的时候，焦点框为0.
  outline: none;
}

html {
  font-size: 13px;
}

body {
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
  line-height: 1.2rem;
  background-color: #f1f1f1;
  -webkit-font-smoothing: antialiased;
}

a {
  color: #999;
}



@each $colorKey, $color in $colors {
  .text-#{$colorKey} {
    color: $color;
  }

  .bg-#{$colorKey} {
    background-color: $color;
  }
}

//text
@each $var in (left, center, right) {
  .text-#{$var} {
    text-align: $var;
  }
}

//font-size

@each $sizeKey, $size in $font-sizes {
  .fs-#{$sizeKey} {
    font-size: $size * $base-font-size
  }
}
.d-flex{
  display: flex;
}
//flex


@each $key, $value in $flex-jc {
  .jc-#{$key} {
    justify-content: $value;
  }
  
}

//align-items

@each $key, $value in $flex-ai {
  .ai-#{$key} {
    align-items: $value;
  }
}
//灵活的项目将垂直显示，正如一个列一样。
.flex-column{
  flex-direction: column;
}

.flex-1{
  flex: 1;
}

// margin padding


@each $typeKey,$type in $spacing-types {
  @each $sizeKey, $size in $spacing-sizes {
    .#{$typeKey}x-#{$sizeKey} {
      #{$type}-left: $size * $spacing-base-size;
      #{$type}-right: $size * $spacing-base-size;
    }

    .#{$typeKey}y-#{$sizeKey} {
      #{$type}-top: $size * $spacing-base-size;
      #{$type}-bottom: $size * $spacing-base-size;
    }

    @each $directionKey, $direction in $spacing-directions {
      .#{$typeKey}#{$directionKey}-#{$sizeKey} {
        #{$type}-#{$direction}: $size * $spacing-base-size;
      }
    }
  }
}
.btn {
 border: none;
 border-radius: 0.2308rem;   
 font-size: map-get($map: $font-sizes, $key: 'sm') * $base-font-size;
 padding: 0.2rem 0.6rem;
}

.nav {
  .nav-item {
    border-bottom: 3px solid transparent;
    padding-bottom: 0.2rem;
    &.active {
      border-bottom: 3px solid #fff;
    }
  }
}
.w-100{
  width: 100%;
}
.flex-wrap{
  flex-wrap: wrap;
}