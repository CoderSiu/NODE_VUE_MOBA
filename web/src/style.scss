* {
  //把元素的内边距和边框都塞到盒子里边，不让盒子变形
  box-sizing: border-box; 
  //当元素获得焦点的时候，焦点框为0.
  outline: none;
}

html {
  font-size: 13px;
}

body {
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
  line-height: 1.2rem;
  background-color: #f1f1f1;
}

a {
  color: #999;
}

$colors: (
  "primary": #db9e3f,
  "white": #fff,
  "light": #f9f9f9,
  "grey": #999,
  "dark-1": #343440,
  "dark": #222,
  "black": #000,
);

@each $colorKey, $color in $colors {
  .text-#{$colorKey} {
    color: $color;
  }

  .bg-#{$colorKey} {
    color: $color;
  }
}

//text
@each $var in (left, center, right) {
  .text-#{$var} {
    text-align: $var;
  }
}

//font-size
$base-font-size: 1rem;
$font-sizes: (
  xs: 0.7692, //10px
  sm: 0.9231, //12px
  md: 1,//13px
  lg: 1.0769,//14px
  xl: 1.2308,//16px
);
@each $sizeKey, $size in $font-sizes {
  .fs-#{$sizeKey} {
    font-size: $size * $base-font-size
  }
}

//flex
$flex-jc: (
  //1-2-3-4------------------
  start: flex-start,
  //-----------------1-2-3-4
  end: flex-end,
  //--------1-2-3-4---------
  center: center,
  //1---2---3---4---5
  between: space-between,
  //--1--2--3--4--5--
  around: space-around,
);

@each $key, $value in $flex-jc {
  .jc-#{$key} {
    justify-content: $value;
  }
  
}

//align-items
$flex-ai: (
    // 1 2 3
    // |
    // |
    start: flex-start,
    // |
    // |
    // 1 2 3
    end: flex-end,
    // |
    // 1 2 3
    // |
    center: center,
    // 1 2 3
    // 1 2 3
    // 1 2 3
    stretch: stretch,
);
@each $key, $value in $flex-ai {
  .ai-#{$key} {
    align-items: $value;
  }
}
//灵活的项目将垂直显示，正如一个列一样。
.flex-column{
  flex-direction: column;
}

.flex-1{
  flex: 1;
}

// margin padding

$spacing-types: (m: margin, p: padding);
$spacing-directions: (t: top, r: right, b: bottom, l: left);
$spacing-base-size: 1rem;
$spacing-sizes: (0: 0, 1: 0.25, 2: 0.5, 3: 1, 4: 1.5, 5: 3);
@each $typeKey,$type in $spacing-types {
  @each $sizeKey, $size in $spacing-sizes {
    .#{$typeKey}x-#{$sizeKey} {
      #{$type}-left: $size * $spacing-base-size;
      #{$type}-right: $size * $spacing-base-size;
    }

    .#{$typeKey}y-#{$sizeKey} {
      #{$type}-top: $size * $spacing-base-size;
      #{$type}-bottom: $size * $spacing-base-size;
    }

    @each $directionKey, $direction in $spacing-directions {
      .#{$typeKey}#{$directionKey}-#{$sizeKey} {
        #{$type}-#{$direction}: $size * $spacing-base-size;
      }
    }
  }

}